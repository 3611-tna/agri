# ======================================================
# üåæ AgriAI CRM PRO 4.3.0 ‚Äì Chat AI Edition
# ======================================================

import streamlit as st
import pandas as pd
import numpy as np
from io import BytesIO
from google import genai
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import MinMaxScaler
import base64

st.set_page_config(page_title="AgriAI CRM Pro 4.3.0", layout="wide", page_icon="üåæ")

# Kh·ªüi t·∫°o session state cho chat
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []
if "current_customer_context" not in st.session_state:
    st.session_state.current_customer_context = None
if "analysis_context" not in st.session_state:
    st.session_state.analysis_context = ""

# ---------- GIAO DI·ªÜN ----------
st.markdown("""
<style>
h1,h2,h3,h4 {color:#AE1C3F;}
.stButton>button {
    background:linear-gradient(90deg,#AE1C3F,#D72638);
    color:white;font-weight:bold;border:none;
    border-radius:8px;padding:0.5em 1.2em;
}
.stButton>button:hover {opacity:0.9;transform:scale(1.03);}
.analysis-box {
    background:white;padding:18px;border-radius:10px;
    border-left:6px solid #AE1C3F;
    box-shadow:0 2px 10px rgba(0,0,0,0.1);
    margin-bottom:25px;
}
.chat-message {
    padding:12px;border-radius:8px;margin-bottom:10px;
}
.user-message {
    background:#f0f0f0;border-left:4px solid #AE1C3F;
}
.ai-message {
    background:#fff5f7;border-left:4px solid #D72638;
}
.footer {text-align:center;color:#777;margin-top:40px;}
</style>
""", unsafe_allow_html=True)

# Hi·ªÉn th·ªã logo
try:
    with open("logo.png", "rb") as f:
        logo_data = base64.b64encode(f.read()).decode()
        st.markdown(
            f'<img src="data:image/png;base64,{logo_data}" style="width:180px;margin-bottom:20px;">',
            unsafe_allow_html=True
        )
except:
    pass

st.title("üåæ AgriAI CRM PRO 4.3.0 ‚Äì AI Chat & Ph√¢n t√≠ch th√¥ng minh")
st.caption("T·ª± ƒë·ªông ph√¢n t√≠ch kh√°ch h√†ng, d·ª± b√°o xu h∆∞·ªõng & chat v·ªõi AI ƒë·ªÉ t∆∞ v·∫•n chuy√™n s√¢u")

# ---------- C·∫§U H√åNH ----------
with st.expander("‚öôÔ∏è C·∫•u h√¨nh Gemini"):
    gemini_key = st.text_input("üî∏ Gemini API Key", type="password")
    gemini_model = st.selectbox("üîπ Model Gemini", ["gemini-2.0-flash", "gemini-1.5-flash"])
    creativity = st.slider("üé® M·ª©c s√°ng t·∫°o (0 - 2)", 0.0, 2.0, 0.8, 0.1)

uploaded = st.file_uploader("üì• T·∫£i file Excel (sheet KhachHang)", type=["xlsx"])

# ---------- H√ÄM C·ªêT L√ïI ----------
def call_gemini(prompt, key, model, creativity):
    try:
        client = genai.Client(api_key=key)
        resp = client.models.generate_content(model=model, contents=prompt, config={"temperature":creativity})
        return resp.text.strip()
    except Exception as e:
        return f"‚ö†Ô∏è L·ªói Gemini: {e}"

def call_gemini_with_history(user_msg, key, model, creativity, context="", history=[]):
    """G·ªçi Gemini v·ªõi l·ªãch s·ª≠ h·ªôi tho·∫°i v√† ng·ªØ c·∫£nh"""
    try:
        client = genai.Client(api_key=key)
        
        # X√¢y d·ª±ng prompt v·ªõi ng·ªØ c·∫£nh v√† l·ªãch s·ª≠
        system_prompt = f"""B·∫°n l√† chuy√™n vi√™n t∆∞ v·∫•n kh√°ch h√†ng Agribank c√≥ 15 nƒÉm kinh nghi·ªám, 
ƒëang h·ªó tr·ª£ c√°n b·ªô t√≠n d·ª•ng ph√¢n t√≠ch v√† t∆∞ v·∫•n kh√°ch h√†ng.

{context}

H√£y tr·∫£ l·ªùi c√¢u h·ªèi d·ª±a tr√™n th√¥ng tin ƒë√£ c√≥ v√† l·ªãch s·ª≠ h·ªôi tho·∫°i. 
N·∫øu c·∫ßn th√™m th√¥ng tin, h√£y h·ªèi c·ª• th·ªÉ. Tr·∫£ l·ªùi ng·∫Øn g·ªçn, chuy√™n nghi·ªáp v√† th·ª±c ti·ªÖn."""

        # K·∫øt h·ª£p l·ªãch s·ª≠
        full_prompt = system_prompt + "\n\n"
        for msg in history[-6:]:  # L·∫•y 6 tin nh·∫Øn g·∫ßn nh·∫•t
            full_prompt += f"{msg['role']}: {msg['content']}\n"
        full_prompt += f"User: {user_msg}\nAssistant:"
        
        resp = client.models.generate_content(
            model=model, 
            contents=full_prompt, 
            config={"temperature": creativity}
        )
        return resp.text.strip()
    except Exception as e:
        return f"‚ö†Ô∏è L·ªói Gemini: {e}"

def calc_scores(row):
    try:
        thu_nhap = float(str(row.get("Thu nh·∫≠p", 0)).replace(",", "").replace(".", ""))
        gui = float(str(row.get("S·ªë d∆∞ ti·ªÅn g·ª≠i", 0)).replace(",", "").replace(".", ""))
        vay = float(str(row.get("S·ªë d∆∞ ti·ªÅn vay", 0)).replace(",", "").replace(".", ""))

        rui_ro = min(100, max(0, (vay / (thu_nhap + 1)) * 60))
        tiem_nang = min(100, (thu_nhap + gui) / 1_000_000 * 10)
        gan_bo = 40 + len(str(row.get("D·ªãch v·ª• ƒëang d√πng", "")).split(",")) * 10
        if "Th√†nh ph·ªë" in str(row.get("Khu v·ª±c", "")): gan_bo += 10

        return round(rui_ro,1), round(tiem_nang,1), round(gan_bo,1)
    except:
        return 0,0,0

def suggest_action(r, t, g, churn_prob, loan_prob):
    acts = []
    if churn_prob > 0.7:
        acts.append("‚ö†Ô∏è Nguy c∆° r·ªùi b·ªè cao ‚Üí c·∫ßn CSKH ho·∫∑c ∆∞u ƒë√£i duy tr√¨.")
    if loan_prob > 0.7:
        acts.append("üí∞ Ti·ªÅm nƒÉng vay th√™m ‚Üí g·ª£i √Ω g√≥i vay ti√™u d√πng / s·∫£n xu·∫•t.")
    if t > 80:
        acts.append("üìà ƒê·ªÅ xu·∫•t g√≥i ti·∫øt ki·ªám linh ho·∫°t ho·∫∑c ƒë·∫ßu t∆∞ d√†i h·∫°n.")
    if g < 50:
        acts.append("üí¨ TƒÉng t∆∞∆°ng t√°c qua ch∆∞∆°ng tr√¨nh tri √¢n / CSKH ƒë·ªãnh k·ª≥.")
    if not acts:
        acts.append("‚úÖ Kh√°ch h√†ng ·ªïn ƒë·ªãnh, duy tr√¨ chƒÉm s√≥c ƒë·ªãnh k·ª≥.")
    return acts

def export_excel(name, summary, df_scores):
    out = BytesIO()
    with pd.ExcelWriter(out, engine="openpyxl") as writer:
        pd.DataFrame({"Kh√°ch h√†ng":[name], "Ph√¢n t√≠ch":[summary]}).to_excel(writer, sheet_name="PhanTich", index=False)
        df_scores.to_excel(writer, sheet_name="Scores", index=False)
    return out.getvalue()

def train_predictive_model(df):
    scaler = MinMaxScaler()
    X = df[["ƒêi·ªÉm R·ªßi ro","ƒêi·ªÉm Ti·ªÅm nƒÉng","ƒêi·ªÉm G·∫Øn b√≥"]]
    X_scaled = scaler.fit_transform(X)

    churn_labels = np.where(df["ƒêi·ªÉm G·∫Øn b√≥"] < 50, 1, 0)
    loan_labels = np.where(df["ƒêi·ªÉm Ti·ªÅm nƒÉng"] > 70, 1, 0)

    # N·∫øu d·ªØ li·ªáu c√≥ <2 l·ªõp, t·∫°o nh√£n gi·∫£ ƒë·ªÉ tr√°nh l·ªói
    if len(np.unique(churn_labels)) < 2:
        churn_labels[0] = 1
    if len(np.unique(loan_labels)) < 2:
        loan_labels[-1] = 1

    churn_model = LogisticRegression().fit(X_scaled, churn_labels)
    loan_model = LogisticRegression().fit(X_scaled, loan_labels)

    return churn_model, loan_model, scaler

# ---------- CH∆Ø∆†NG TR√åNH CH√çNH ----------
if uploaded:
    df = pd.read_excel(uploaded, sheet_name="KhachHang")
    st.success(f"‚úÖ ƒê√£ t·∫£i {len(df)} kh√°ch h√†ng.")
    scores = [calc_scores(row) for _, row in df.iterrows()]
    df["ƒêi·ªÉm R·ªßi ro"], df["ƒêi·ªÉm Ti·ªÅm nƒÉng"], df["ƒêi·ªÉm G·∫Øn b√≥"] = zip(*scores)
    st.dataframe(df, use_container_width=True)

    # Hu·∫•n luy·ªán m√¥ h√¨nh (·ªïn ƒë·ªãnh)
    churn_model, loan_model, scaler = train_predictive_model(df)

    selected = st.selectbox("üë§ Ch·ªçn kh√°ch h√†ng ƒë·ªÉ ph√¢n t√≠ch", df["H·ªç t√™n"].tolist())
    cust = df[df["H·ªç t√™n"] == selected].iloc[0].to_dict()

    if st.button("üöÄ Ph√¢n t√≠ch chuy√™n s√¢u & d·ª± b√°o h√†nh ƒë·ªông"):
        r,t,g = calc_scores(cust)
        features = np.array([[r,t,g]])
        X_scaled = scaler.transform(features)
        churn_prob = churn_model.predict_proba(X_scaled)[0][1]
        loan_prob = loan_model.predict_proba(X_scaled)[0][1]

        actions = suggest_action(r,t,g,churn_prob,loan_prob)

        prompt = f"""
B·∫°n l√† chuy√™n vi√™n t∆∞ v·∫•n kh√°ch h√†ng Agribank c√≥ 15 nƒÉm kinh nghi·ªám.
D∆∞·ªõi ƒë√¢y l√† h·ªì s∆° kh√°ch h√†ng:
{cust}

ƒêi·ªÉm h·ªá th·ªëng:
- R·ªßi ro: {r}
- Ti·ªÅm nƒÉng: {t}
- G·∫Øn b√≥: {g}
- X√°c su·∫•t r·ªùi b·ªè: {round(churn_prob*100,2)}%
- X√°c su·∫•t vay th√™m: {round(loan_prob*100,2)}%

H√£y vi·∫øt b·∫£n PH√ÇN T√çCH NGHI·ªÜP V·ª§ g·ªìm:
1Ô∏è‚É£ T·ªïng quan t√†i ch√≠nh & h√†nh vi kh√°ch h√†ng.
2Ô∏è‚É£ R·ªßi ro & xu h∆∞·ªõng h√†nh ƒë·ªông.
3Ô∏è‚É£ G·ª£i √Ω s·∫£n ph·∫©m Agribank ph√π h·ª£p.
4Ô∏è‚É£ K·∫ø ho·∫°ch h√†nh ƒë·ªông c·ª• th·ªÉ (trong 1‚Äì3 th√°ng).

Ng·∫Øn g·ªçn, r√µ r√†ng, chuy√™n nghi·ªáp v√† th·ª±c ti·ªÖn.
"""
        ai_text = call_gemini(prompt, gemini_key, gemini_model, creativity)

        # L∆∞u ng·ªØ c·∫£nh kh√°ch h√†ng cho chat
        st.session_state.current_customer_context = cust
        st.session_state.analysis_context = f"""
TH√îNG TIN KH√ÅCH H√ÄNG ƒêANG PH√ÇN T√çCH:
{cust}

ƒêI·ªÇM H·ªÜ TH·ªêNG:
- R·ªßi ro: {r}
- Ti·ªÅm nƒÉng: {t}
- G·∫Øn b√≥: {g}
- X√°c su·∫•t r·ªùi b·ªè: {round(churn_prob*100,2)}%
- X√°c su·∫•t vay th√™m: {round(loan_prob*100,2)}%

PH√ÇN T√çCH AI:
{ai_text}

H√ÄNH ƒê·ªòNG ƒê·ªÄ XU·∫§T:
{chr(10).join(actions)}
"""

        summary = f"""
### üìå Ph√¢n t√≠ch kh√°ch h√†ng **{selected}**
#### üî¢ ƒêi·ªÉm h·ªá th·ªëng
- R·ªßi ro: {r} | Ti·ªÅm nƒÉng: {t} | G·∫Øn b√≥: {g}
- X√°c su·∫•t r·ªùi b·ªè: {round(churn_prob*100,2)}% | X√°c su·∫•t vay th√™m: {round(loan_prob*100,2)}%

#### üí° Nh·∫≠n ƒë·ªãnh chuy√™n gia (AI)
{ai_text}

#### üéØ H√†nh ƒë·ªông ƒë·ªÅ xu·∫•t
{chr(10).join(actions)}
"""
        st.markdown(f"<div class='analysis-box'>{summary}</div>", unsafe_allow_html=True)

        df_scores = pd.DataFrame({
            "Ch·ªâ ti√™u":["R·ªßi ro","Ti·ªÅm nƒÉng","G·∫Øn b√≥","X√°c su·∫•t r·ªùi b·ªè","X√°c su·∫•t vay th√™m"],
            "Gi√° tr·ªã":[r,t,g,round(churn_prob*100,2),round(loan_prob*100,2)]
        })
        excel = export_excel(selected, summary, df_scores)
        st.download_button("üìä T·∫£i b√°o c√°o chi ti·∫øt (Excel)", excel, file_name=f"{selected}_AgriAI_Insight.xlsx")

    # ========== PH·∫¶N CHAT AI ==========
    st.markdown("---")
    st.subheader("üí¨ Chat v·ªõi AI T∆∞ v·∫•n")
    
    if st.session_state.analysis_context:
        st.info("‚úÖ AI ƒë√£ n·∫Øm th√¥ng tin kh√°ch h√†ng. B·∫°n c√≥ th·ªÉ h·ªèi th√™m v·ªÅ ph√¢n t√≠ch, ƒë·ªÅ xu·∫•t h√†nh ƒë·ªông ho·∫∑c cung c·∫•p th√¥ng tin b·ªï sung.")
    else:
        st.warning("‚ö†Ô∏è H√£y ph√¢n t√≠ch m·ªôt kh√°ch h√†ng tr∆∞·ªõc ƒë·ªÉ AI c√≥ ƒë·ªß ng·ªØ c·∫£nh t∆∞ v·∫•n.")
    
    # Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
    chat_container = st.container()
    with chat_container:
        for msg in st.session_state.chat_history:
            if msg["role"] == "User":
                st.markdown(f"<div class='chat-message user-message'><b>üßë B·∫°n:</b> {msg['content']}</div>", unsafe_allow_html=True)
            else:
                st.markdown(f"<div class='chat-message ai-message'><b>ü§ñ AI:</b> {msg['content']}</div>", unsafe_allow_html=True)
    
    # Input chat
    col1, col2 = st.columns([5,1])
    with col1:
        user_input = st.text_input("üí≠ Nh·∫≠p c√¢u h·ªèi ho·∫∑c th√¥ng tin b·ªï sung:", key="chat_input", placeholder="VD: Kh√°ch h√†ng n√†y c√≥ quan h·ªá t·ªët v·ªõi chi nh√°nh kh√¥ng?")
    with col2:
        send_btn = st.button("G·ª≠i", use_container_width=True)
        clear_btn = st.button("X√≥a l·ªãch s·ª≠", use_container_width=True)
    
    if clear_btn:
        st.session_state.chat_history = []
        st.rerun()
    
    if send_btn and user_input.strip():
        # Th√™m tin nh·∫Øn c·ªßa user
        st.session_state.chat_history.append({"role": "User", "content": user_input})
        
        # G·ªçi AI v·ªõi context v√† history
        ai_response = call_gemini_with_history(
            user_input, 
            gemini_key, 
            gemini_model, 
            creativity,
            context=st.session_state.analysis_context,
            history=st.session_state.chat_history
        )
        
        # Th√™m ph·∫£n h·ªìi AI
        st.session_state.chat_history.append({"role": "Assistant", "content": ai_response})
        st.rerun()

else:
    st.info("‚¨ÜÔ∏è H√£y t·∫£i file Excel kh√°ch h√†ng (sheet KhachHang) ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch.")

st.markdown("<div class='footer'>¬© 2025 Agribank AI | AgriAI CRM Pro 4.3.0 - Chat AI Edition</div>", unsafe_allow_html=True)
