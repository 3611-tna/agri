# ==========================================================
# üåæ AGRIAI CRM PRO v3.1
# AI Ph√¢n t√≠ch & T∆∞ v·∫•n Kh√°ch h√†ng Agribank
# T√°c gi·∫£: Shine | Agribank Digital Transformation
# ==========================================================

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from io import BytesIO
import concurrent.futures
from openai import OpenAI
from google import genai

# ========== C·∫§U H√åNH TRANG ==========
st.set_page_config(page_title="AgriAI CRM Pro 3.1", layout="wide", page_icon="ü§ñ")

# ========== STYLE ==========
st.markdown("""
<style>
h1,h2,h3,h4 {color:#AE1C3F;}
.stButton>button {
    background: linear-gradient(90deg,#AE1C3F,#D72638);
    color:white;font-weight:bold;border:none;
    padding:0.6em 1.2em;border-radius:8px;
}
.stButton>button:hover {opacity:0.9;transform:scale(1.02);}
.analysis-box {
    background:white;padding:18px;border-radius:10px;
    border-left:6px solid #AE1C3F;
    box-shadow:0 3px 10px rgba(0,0,0,0.1);
}
.chat-box {
    background:#fff;border-left:4px solid #AE1C3F;
    padding:10px;margin:8px 0;border-radius:6px;
}
.footer {
    text-align:center;color:#777;margin-top:40px;font-size:0.9em;
}
</style>
""", unsafe_allow_html=True)

st.title("ü§ñ AgriAI CRM Pro 3.1")
st.caption("·ª®ng d·ª•ng AI h·ªó tr·ª£ ph√¢n t√≠ch, t∆∞ v·∫•n v√† chƒÉm s√≥c kh√°ch h√†ng Agribank ‚Äì k·∫øt h·ª£p OpenAI & Gemini")

# ========== KHU C·∫§U H√åNH ==========
with st.expander("‚öôÔ∏è C·∫•u h√¨nh AI"):
    c1, c2 = st.columns(2)
    with c1:
        openai_key = st.text_input("üîπ OpenAI API Key", type="password")
        openai_model = st.selectbox("üîπ Model OpenAI", ["gpt-4o-mini", "gpt-4-turbo", "gpt-5"])
    with c2:
        gemini_key = st.text_input("üî∏ Gemini API Key", type="password")
        gemini_model = st.selectbox("üî∏ Model Gemini", ["gemini-2.0-flash", "gemini-1.5-flash"])
    creativity = st.slider("üé® M·ª©c s√°ng t·∫°o (0‚Äì2)", 0.0, 2.0, 1.0, 0.1)
    ai_mode = st.radio("ü§ù Ch·∫ø ƒë·ªô AI", ["OpenAI", "Gemini", "Hybrid"], horizontal=True)

# ========== UPLOAD FILE ==========
uploaded = st.file_uploader("üì• T·∫£i file Excel kh√°ch h√†ng (sheet: KhachHang)", type=["xlsx"])

# ========== H√ÄM G·ªåI AI ==========
def call_openai(prompt, key, model_name, creativity):
    try:
        client = OpenAI(api_key=key)
        response = client.chat.completions.create(
            model=model_name,
            messages=[
                {"role": "system", "content": "B·∫°n l√† chuy√™n gia ph√¢n t√≠ch kh√°ch h√†ng Agribank, c√≥ 15 nƒÉm kinh nghi·ªám. T∆∞ v·∫•n th·ª±c t·∫ø, ng·∫Øn g·ªçn, c√≥ c∆° s·ªü."},
                {"role": "user", "content": prompt},
            ],
            temperature=creativity,
            max_tokens=1200
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        return f"‚ö†Ô∏è OpenAI l·ªói: {e}"

def call_gemini(prompt, key, model_name):
    try:
        client = genai.Client(api_key=key)
        response = client.models.generate_content(model=model_name, contents=prompt)
        return response.text.strip()
    except Exception as e:
        return f"‚ö†Ô∏è Gemini l·ªói: {e}"

def export_excel(customer_name, summary):
    df = pd.DataFrame({"Kh√°ch h√†ng": [customer_name], "Ph√¢n t√≠ch & T∆∞ v·∫•n": [summary]})
    buf = BytesIO()
    with pd.ExcelWriter(buf, engine="openpyxl") as writer:
        df.to_excel(writer, index=False, sheet_name="PhanTich")
    return buf.getvalue()

# ========== MAIN ==========
if uploaded:
    df = pd.read_excel(uploaded, sheet_name="KhachHang")
    st.success(f"‚úÖ ƒê√£ t·∫£i d·ªØ li·ªáu g·ªìm {len(df)} kh√°ch h√†ng.")

    search = st.text_input("üîç Nh·∫≠p t√™n kh√°ch h√†ng ƒë·ªÉ l·ªçc")
    filtered = df[df["H·ªç t√™n"].str.contains(search, case=False, na=False)] if search else df
    st.dataframe(filtered, use_container_width=True)

    selected = st.selectbox("üë§ Ch·ªçn kh√°ch h√†ng c·∫ßn ph√¢n t√≠ch", filtered["H·ªç t√™n"].tolist())
    cust_data = df[df["H·ªç t√™n"] == selected].iloc[0].to_dict()

    col1, col2 = st.columns([1.2, 1])
    with col1:
        if st.button("üöÄ Ph√¢n t√≠ch kh√°ch h√†ng"):
            prompt = f"""
            D·ªØ li·ªáu kh√°ch h√†ng: {cust_data}
            H√£y ph√¢n t√≠ch kh√°ch h√†ng n√†y theo 4 kh√≠a c·∫°nh:
            1Ô∏è‚É£ NƒÉng l·ª±c t√†i ch√≠nh v√† m·ª©c ƒë·ªô r·ªßi ro.
            2Ô∏è‚É£ T√¢m l√Ω, ƒë·ªô tu·ªïi, s·ªü th√≠ch, khu v·ª±c sinh s·ªëng.
            3Ô∏è‚É£ G·ª£i √Ω s·∫£n ph·∫©m ph√π h·ª£p (ti·∫øt ki·ªám, vay, b·∫£o hi·ªÉm...).
            4Ô∏è‚É£ ƒê·ªÅ xu·∫•t chi·∫øn l∆∞·ª£c chƒÉm s√≥c v√† gi·ªØ ch√¢n kh√°ch h√†ng.
            Tr√¨nh b√†y c√≥ l√Ω do, c√≥ d·∫´n ch·ª©ng, theo phong c√°ch chuy√™n gia Agribank.
            """

            if ai_mode == "Hybrid":
                with concurrent.futures.ThreadPoolExecutor() as ex:
                    futures = []
                    if openai_key:
                        futures.append(ex.submit(call_openai, prompt, openai_key, openai_model, creativity))
                    if gemini_key:
                        futures.append(ex.submit(call_gemini, prompt, gemini_key, gemini_model))
                    results = [f.result() for f in concurrent.futures.as_completed(futures)]
                    summary = "\n\n---\n\n".join(results)
            elif ai_mode == "OpenAI":
                summary = call_openai(prompt, openai_key, openai_model, creativity)
            else:
                summary = call_gemini(prompt, gemini_key, gemini_model)

            st.session_state["analysis"] = summary
            st.markdown(f"<div class='analysis-box'>{summary}</div>", unsafe_allow_html=True)

            excel_data = export_excel(selected, summary)
            st.download_button("üìä T·∫£i k·∫øt qu·∫£ (Excel)", excel_data, file_name=f"{selected}_AI.xlsx")

    with col2:
        try:
            income = float(str(cust_data.get("Thu nh·∫≠p", "0")).replace(",", "").replace(".", ""))
            deposit = float(str(cust_data.get("S·ªë d∆∞ ti·ªÅn g·ª≠i", "0")).replace(",", "").replace(".", ""))
            loan = float(str(cust_data.get("S·ªë d∆∞ ti·ªÅn vay", "0")).replace(",", "").replace(".", ""))

            fig, ax = plt.subplots(figsize=(4,3))
            sns.barplot(x=["Thu nh·∫≠p", "Ti·ªÅn g·ª≠i", "Ti·ªÅn vay"], y=[income, deposit, loan],
                        ax=ax, palette=["#AE1C3F","#D72638","#F57C00"])
            ax.set_ylabel("Gi√° tr·ªã (VNƒê)")
            ax.set_title("üìà C∆° c·∫•u t√†i ch√≠nh kh√°ch h√†ng")
            st.pyplot(fig)
        except Exception:
            st.info("Kh√¥ng ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì.")

    # === KHUNG CHAT ===
    st.markdown("### üí¨ Tr·ª£ l√Ω AI ‚Äì B·ªï sung ho·∫∑c h·ªèi th√™m")
    if "chat_history" not in st.session_state:
        st.session_state["chat_history"] = []

    for msg in st.session_state["chat_history"]:
        who = "üßë" if msg["role"] == "user" else "ü§ñ"
        st.markdown(f"<div class='chat-box'><b>{who}</b> {msg['content']}</div>", unsafe_allow_html=True)

    question = st.chat_input("Nh·∫≠p c√¢u h·ªèi ho·∫∑c th√¥ng tin b·ªï sung...")
    if question:
        st.session_state["chat_history"].append({"role":"user","content":question})
        prompt = f"Kh√°ch h√†ng: {cust_data}\nNh√¢n vi√™n n√≥i: {question}\nH√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn, s√°t th·ª±c t·∫ø, ch·ªâ h·ªèi l·∫°i n·∫øu c·∫ßn th√¥ng tin b·ªï sung."
        answer = call_openai(prompt, openai_key, openai_model, creativity)
        st.session_state["chat_history"].append({"role":"assistant","content":answer})
        st.rerun()

else:
    st.info("‚¨ÜÔ∏è H√£y t·∫£i file Excel (sheet KhachHang) ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch.")

# FOOTER
st.markdown("<div class='footer'>¬© 2025 Agribank AI | AgriAI CRM Pro v3.1</div>", unsafe_allow_html=True)
