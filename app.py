import streamlit as st
import pandas as pd
from google import genai
from google.genai.errors import APIError
from io import BytesIO

# ==============================
# ‚öôÔ∏è C·∫•u h√¨nh giao di·ªán
# ==============================
st.set_page_config(
    page_title="üí° AgriAnalyze Kh√°ch h√†ng Agribank",
    layout="wide"
)

# Load CSS
with open("style.css") as f:
    st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

# ==============================
# üé® Ti√™u ƒë·ªÅ ·ª©ng d·ª•ng
# ==============================
st.markdown("""
<h1 style='text-align:center; color:#AE1C3F;'>üí° AGRIANALYZE ‚Äì T∆Ø V·∫§N KH√ÅCH H√ÄNG AGRIBANK</h1>
<p style='text-align:center; color:gray;'>Ph√¢n t√≠ch h√†nh vi, t√≠nh c√°ch v√† t∆∞ v·∫•n s·∫£n ph·∫©m ph√π h·ª£p cho kh√°ch h√†ng Agribank</p>
<hr style='border:1px solid #AE1C3F'>
""", unsafe_allow_html=True)

# ==============================
# üîë Nh·∫≠p API Key Gemini
# ==============================
with st.expander("üîë C·∫•u h√¨nh API Key Gemini"):
    api_key = st.text_input("Nh·∫≠p API Key c·ªßa b·∫°n:", type="password", placeholder="AIzaSy...")
    st.caption("API Key ch·ªâ ƒë∆∞·ª£c d√πng c·ª•c b·ªô, kh√¥ng l∆∞u l·∫°i tr√™n m√°y ch·ªß.")

# ==============================
# üì§ Upload file Excel kh√°ch h√†ng
# ==============================
uploaded_file = st.file_uploader(
    "üìÇ T·∫£i file Excel d·ªØ li·ªáu kh√°ch h√†ng Agribank (sheet: KhachHang)",
    type=["xlsx", "xls"]
)

# ==============================
# ü§ñ H√†m g·ªçi Gemini AI
# ==============================
def get_ai_analysis(customer_info, api_key):
    try:
        client = genai.Client(api_key=api_key)
        model = "gemini-2.5-flash"

        prompt = f"""
        B·∫°n l√† m·ªôt chuy√™n gia t∆∞ v·∫•n kh√°ch h√†ng c·ªßa Agribank.
        H√£y ph√¢n t√≠ch v√† t∆∞ v·∫•n chi ti·∫øt cho kh√°ch h√†ng d·ª±a tr√™n th√¥ng tin sau:

        {customer_info}

        Y√™u c·∫ßu ph·∫£n h·ªìi g·ªìm:
        1. ƒê√°nh gi√° t·ªïng quan v·ªÅ kh√°ch h√†ng (h√†nh vi, t√≠nh c√°ch, s·ªü th√≠ch).
        2. Ph√¢n t√≠ch theo ƒë·ªô tu·ªïi, ngh·ªÅ nghi·ªáp, thu nh·∫≠p, t√¥n gi√°o, ch√≠nh tr·ªã, cung ho√†ng ƒë·∫°o (n·∫øu c√≥).
        3. D·ª± ƒëo√°n h√†nh vi t√†i ch√≠nh v√† nhu c·∫ßu s·∫£n ph·∫©m ng√¢n h√†ng.
        4. G·ª£i √Ω s·∫£n ph·∫©m/d·ªãch v·ª• ph√π h·ª£p c·ªßa Agribank (ti·ªÅn g·ª≠i, t√≠n d·ª•ng, b·∫£o hi·ªÉm, s·ªë ho√°...).
        5. ƒê∆∞a ra khuy·∫øn ngh·ªã t∆∞∆°ng t√°c / chƒÉm s√≥c ph√π h·ª£p.

        Vi·∫øt ng·∫Øn g·ªçn, s√∫c t√≠ch, chuy√™n nghi·ªáp, t·ªëi ƒëa 5 ƒëo·∫°n.
        """

        response = client.models.generate_content(model=model, contents=prompt)
        return response.text
    except APIError as e:
        return f"‚ö†Ô∏è L·ªói g·ªçi Gemini API: {e}"
    except Exception as e:
        return f"‚ö†Ô∏è L·ªói kh√°c: {e}"

# ==============================
# üìä X·ª≠ l√Ω v√† hi·ªÉn th·ªã d·ªØ li·ªáu
# ==============================
if uploaded_file is not None:
    try:
        df = pd.read_excel(uploaded_file, sheet_name="KhachHang")

        st.success(f"‚úÖ ƒê√£ t·∫£i {len(df)} kh√°ch h√†ng t·ª´ file Excel.")

        # Hi·ªÉn th·ªã danh s√°ch kh√°ch h√†ng
        customer_list = df["H·ªç t√™n"].tolist()
        selected_customers = st.multiselect(
            "üë• Ch·ªçn kh√°ch h√†ng c·∫ßn ph√¢n t√≠ch:",
            options=customer_list,
            default=customer_list[:1] if len(customer_list) > 0 else []
        )

        if len(selected_customers) > 0:
            selected_df = df[df["H·ªç t√™n"].isin(selected_customers)]

            st.dataframe(selected_df, use_container_width=True)

            if st.button("üöÄ Ph√¢n t√≠ch & T∆∞ v·∫•n b·∫±ng Gemini AI"):
                if not api_key:
                    st.error("‚ùå Vui l√≤ng nh·∫≠p API Key Gemini tr∆∞·ªõc.")
                else:
                    results = []
                    for _, row in selected_df.iterrows():
                        customer_info = row.to_dict()
                        analysis = get_ai_analysis(customer_info, api_key)
                        results.append({
                            "H·ªç t√™n": row["H·ªç t√™n"],
                            "Ph√¢n t√≠ch & t∆∞ v·∫•n": analysis
                        })
                    results_df = pd.DataFrame(results)

                    st.subheader("üß† K·∫øt qu·∫£ ph√¢n t√≠ch & t∆∞ v·∫•n")
                    for i, row in results_df.iterrows():
                        st.markdown(f"### üë§ {row['H·ªç t√™n']}")
                        st.info(row["Ph√¢n t√≠ch & t∆∞ v·∫•n"])

                    # Xu·∫•t Excel
                    output = BytesIO()
                    results_df.to_excel(output, index=False, engine="openpyxl")
                    st.download_button(
                        label="‚¨áÔ∏è T·∫£i k·∫øt qu·∫£ t∆∞ v·∫•n (Excel)",
                        data=output.getvalue(),
                        file_name="tu_van_khach_hang.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )

    except Exception as e:
        st.error(f"‚ö†Ô∏è L·ªói khi ƒë·ªçc file Excel: {e}")
else:
    st.info("‚¨ÜÔ∏è Vui l√≤ng t·∫£i l√™n file kh√°ch h√†ng ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch.")

# ==============================
# üîö Footer
# ==============================
st.markdown("""
<footer style='text-align:center; margin-top:40px; padding:10px; background:#AE1C3F; color:white; border-radius:12px;'>
¬© 2025 Agribank Training & Development ‚Äî ·ª®ng d·ª•ng <b>AgriAnalyze Kh√°ch h√†ng</b><br>
Ph√°t tri·ªÉn b·ªüi B·ªô ph·∫≠n CNTT Agribank
</footer>
""", unsafe_allow_html=True)
