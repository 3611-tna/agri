import streamlit as st
import pandas as pd
import concurrent.futures
from io import BytesIO
from fpdf import FPDF
from google import genai
from google.genai.errors import APIError

# ============= OPENAI Import Compatibility ============
try:
    from openai import OpenAI
except ImportError:
    import openai
    OpenAI = None

# ============= PAGE CONFIGURATION =====================
st.set_page_config(page_title="ü§ñ AgriAI CRM Pro", layout="wide", page_icon="ü§ñ")

# ============= STYLE ==================================
st.markdown("""
<style>
body { font-family: 'Segoe UI', sans-serif; background-color:#fafafa;}
h1,h2,h3 {color:#AE1C3F;}
.analysis-card {
  background-color: #fff;
  border-left: 5px solid #AE1C3F;
  border-radius: 10px;
  padding: 1rem;
  margin-bottom: 1rem;
  box-shadow: 0 2px 8px rgba(0,0,0,0.05);
}
.chat-box {
  background: #f8f8f8;
  border-radius: 10px;
  padding: 0.6rem;
  margin: 0.4rem 0;
}
.chat-user {color:#AE1C3F;font-weight:bold;}
.chat-ai {color:#333;}
</style>
""", unsafe_allow_html=True)

st.markdown("<h1 style='text-align:center;'>ü§ñ AGRIAI CRM PRO</h1>", unsafe_allow_html=True)
st.markdown("<p style='text-align:center;color:gray;'>Ph√¢n t√≠ch & t∆∞ v·∫•n kh√°ch h√†ng Agribank b·∫±ng AI c√≥ tr√≠ nh·ªõ & chat t∆∞∆°ng t√°c</p><hr>", unsafe_allow_html=True)

# ============= CONFIG PANEL ===========================
with st.expander("‚öôÔ∏è C·∫•u h√¨nh AI & API"):
    c1, c2 = st.columns(2)
    with c1:
        openai_key = st.text_input("üîπ OpenAI API Key:", type="password")
        openai_model = st.selectbox("üîπ Model OpenAI:", ["gpt-5", "gpt-4o-mini", "gpt-4-turbo"])
    with c2:
        gemini_key = st.text_input("üî∏ Gemini API Key:", type="password")
        gemini_model = st.selectbox("üî∏ Model Gemini:", ["gemini-2.0-flash", "gemini-1.5-flash"])
    creativity = st.slider("üé® M·ª©c s√°ng t·∫°o (0‚Äì2)", 0.0, 2.0, 1.0, 0.1)
    ai_mode = st.radio("ü§ù Ch·∫ø ƒë·ªô AI:", ["Gemini", "OpenAI", "Hybrid"], horizontal=True)

# ============= UPLOAD FILE ============================
uploaded = st.file_uploader("üì• T·∫£i file Excel d·ªØ li·ªáu kh√°ch h√†ng (sheet: KhachHang)", type=["xlsx", "xls"])

# ============= AI CALL FUNCTIONS ======================
def call_gemini(prompt, key, model_name):
    try:
        client = genai.Client(api_key=key)
        response = client.models.generate_content(model=model_name, contents=prompt)
        return response.text.strip()
    except Exception as e:
        return f"‚ö†Ô∏è Gemini l·ªói: {e}"

def call_openai(prompt, key, model_name, creativity):
    try:
        if OpenAI:
            client = OpenAI(api_key=key)
            resp = client.chat.completions.create(
                model=model_name,
                messages=[{"role": "user", "content": prompt}],
                temperature=creativity
            )
            return resp.choices[0].message.content.strip()
        else:
            openai.api_key = key
            resp = openai.ChatCompletion.create(
                model=model_name,
                messages=[{"role": "user", "content": prompt}],
                temperature=creativity
            )
            return resp.choices[0].message.content.strip()
    except Exception as e:
        return f"‚ö†Ô∏è OpenAI l·ªói: {e}"

# ============= PDF EXPORT =============================
def export_pdf(customer_name, sections):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", "B", 16)
    pdf.cell(0, 10, f"B√ÅO C√ÅO PH√ÇN T√çCH KH√ÅCH H√ÄNG: {customer_name}", ln=True)
    pdf.set_font("Arial", "", 12)
    for title, content in sections.items():
        pdf.multi_cell(0, 10, f"\n[{title}]\n{content}")
    output = BytesIO()
    pdf.output(output)
    return output.getvalue()

# ============= CONTEXT MEMORY =========================
if "memory" not in st.session_state:
    st.session_state["memory"] = {}

if uploaded:
    df = pd.read_excel(uploaded, sheet_name="KhachHang")
    st.success(f"‚úÖ ƒê√£ t·∫£i {len(df)} kh√°ch h√†ng.")
    selected = st.selectbox("üë• Ch·ªçn kh√°ch h√†ng c·∫ßn ph√¢n t√≠ch", df["H·ªç t√™n"].tolist())

    if selected not in st.session_state["memory"]:
        st.session_state["memory"][selected] = {"chat": [], "missing": []}

    cust_data = df[df["H·ªç t√™n"] == selected].to_dict(orient="records")[0]
    st.dataframe(pd.DataFrame([cust_data]), use_container_width=True)

    # ============= PH√ÇN T√çCH CH√çNH =====================
    if st.button("üöÄ Ph√¢n t√≠ch kh√°ch h√†ng"):
        missing = [col for col, val in cust_data.items() if pd.isna(val) or val == ""]
        st.session_state["memory"][selected]["missing"] = missing
        st.write(f"üß© D·ªØ li·ªáu thi·∫øu: {', '.join(missing) if missing else 'Kh√¥ng c√≥'}")

        prompt = f"""
        B·∫°n l√† chuy√™n gia Agribank v·ªõi 15 nƒÉm kinh nghi·ªám.
        H√£y ph√¢n t√≠ch kh√°ch h√†ng d∆∞·ªõi g√≥c ƒë·ªô chuy√™n gia c√°c m·∫£ng sau:
        1Ô∏è‚É£ T√†i ch√≠nh & nƒÉng l·ª±c thanh kho·∫£n
        2Ô∏è‚É£ H√†nh vi & t√¢m l√Ω ti√™u d√πng
        3Ô∏è‚É£ S·∫£n ph·∫©m ti·ªÅm nƒÉng ph√π h·ª£p
        4Ô∏è‚É£ ƒê·ªãnh h∆∞·ªõng chƒÉm s√≥c & gi·ªØ ch√¢n
        D·ªØ li·ªáu kh√°ch h√†ng:
        {cust_data}
        """

        gemini_text, openai_text = None, None
        if ai_mode == "Hybrid":
            with concurrent.futures.ThreadPoolExecutor() as pool:
                futures = []
                if gemini_key: futures.append(pool.submit(call_gemini, prompt, gemini_key, gemini_model))
                if openai_key: futures.append(pool.submit(call_openai, prompt, openai_key, openai_model, creativity))
                results = [f.result() for f in concurrent.futures.as_completed(futures)]
                texts = [r for r in results if "l·ªói" not in r]
                summary = "\n\n---\n\n".join(texts)
        elif ai_mode == "Gemini":
            summary = call_gemini(prompt, gemini_key, gemini_model)
        else:
            summary = call_openai(prompt, openai_key, openai_model, creativity)

        st.session_state["memory"][selected]["analysis"] = summary
        st.markdown(f"<div class='analysis-card'>{summary}</div>", unsafe_allow_html=True)

        # EXPORT
        pdf_data = export_pdf(selected, {"Ph√¢n t√≠ch & T∆∞ v·∫•n": summary})
        st.download_button("üìÑ Xu·∫•t b√°o c√°o PDF", pdf_data, file_name=f"{selected}_report.pdf")

    # ============= CHAT KHUNG ==========================
    st.markdown("### üí¨ Tr·ª£ l√Ω AI - T∆∞ v·∫•n & b·ªï sung d·ªØ li·ªáu")

    for msg in st.session_state["memory"][selected]["chat"]:
        if msg["role"] == "user":
            st.markdown(f"<div class='chat-box chat-user'>üßë‚Äçüíº B·∫°n: {msg['content']}</div>", unsafe_allow_html=True)
        else:
            st.markdown(f"<div class='chat-box chat-ai'>ü§ñ AI: {msg['content']}</div>", unsafe_allow_html=True)

    user_input = st.chat_input("Nh·∫≠p c√¢u h·ªèi ho·∫∑c th√¥ng tin b·ªï sung...")
    if user_input:
        st.session_state["memory"][selected]["chat"].append({"role": "user", "content": user_input})

        # X√°c ƒë·ªãnh n·∫øu thi·∫øu d·ªØ li·ªáu
        missing = st.session_state["memory"][selected]["missing"]
        if missing:
            prompt = f"""
            B·∫°n ƒëang t∆∞ v·∫•n cho nh√¢n vi√™n Agribank.
            Th√¥ng tin kh√°ch h√†ng: {cust_data}
            L·ªãch s·ª≠ h·ªôi tho·∫°i: {st.session_state["memory"][selected]['chat']}
            Ng∆∞·ªùi d√πng v·ª´a n√≥i: "{user_input}"
            H√£y h·ªèi th√™m th√¥ng tin c·∫ßn thi·∫øt ho·∫∑c ti·∫øp t·ª•c ph√¢n t√≠ch, 
            nh∆∞ng ch·ªâ h·ªèi nh·ªØng g√¨ c√≤n thi·∫øu: {missing}.
            """
        else:
            prompt = f"""
            B·∫°n ƒëang n√≥i chuy·ªán v·ªÅ kh√°ch h√†ng: {selected}.
            D·ªØ li·ªáu: {cust_data}
            Nh√¢n vi√™n v·ª´a n√≥i: {user_input}
            H√£y ph·∫£n h·ªìi ng·∫Øn g·ªçn, c·ª• th·ªÉ v√† th·ª±c t·∫ø.
            """

        response = call_openai(prompt, openai_key, openai_model, creativity)
        st.session_state["memory"][selected]["chat"].append({"role": "assistant", "content": response})
        st.experimental_rerun()

else:
    st.info("‚¨ÜÔ∏è H√£y t·∫£i file Excel (sheet: KhachHang) ƒë·ªÉ b·∫Øt ƒë·∫ßu.")

# ============= FOOTER ==========================
st.markdown("""
<hr><div style='text-align:center;background:#AE1C3F;color:white;padding:10px;border-radius:12px;'>
¬© 2025 Agribank Training & Development ‚Äî AgriAI CRM Pro<br>
T∆∞ v·∫•n kh√°ch h√†ng th√¥ng minh, hi·ªÉu ng·ªØ c·∫£nh v√† c√≥ tr√°ch nhi·ªám.
</div>
""", unsafe_allow_html=True)
