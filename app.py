# ======================================================
# üåæ AgriAI CRM PRO 4.1 ‚Äì Ph√¢n t√≠ch & T∆∞ v·∫•n chuy√™n s√¢u kh√°ch h√†ng Agribank
# ------------------------------------------------------
# T√°c gi·∫£: Shine | Agribank T√¢y Ngh·ªá An | 2025
# Phi√™n b·∫£n: v4.1 (Gemini-only)
# ======================================================

import streamlit as st
import pandas as pd
import numpy as np
from io import BytesIO
from google import genai
import seaborn as sns
import matplotlib.pyplot as plt

# ---------- PAGE CONFIG ----------
st.set_page_config(page_title="AgriAI CRM Pro 4.1", layout="wide", page_icon="üåæ")

# ---------- STYLE ----------
st.markdown("""
<style>
h1,h2,h3,h4 {color:#AE1C3F;}
.stButton>button {
    background:linear-gradient(90deg,#AE1C3F,#D72638);
    color:white;font-weight:bold;border:none;
    border-radius:8px;padding:0.5em 1.2em;
}
.stButton>button:hover {opacity:0.9;transform:scale(1.03);}
.analysis-box {
    background:white;padding:16px;border-radius:10px;
    border-left:6px solid #AE1C3F;
    box-shadow:0 2px 10px rgba(0,0,0,0.1);
    margin-bottom:20px;
}
.footer {text-align:center;color:#777;margin-top:40px;}
</style>
""", unsafe_allow_html=True)

st.title("üåæ AgriAI CRM PRO 4.1 ‚Äì Ph√¢n t√≠ch chuy√™n s√¢u & ƒê·ªÅ xu·∫•t h√†nh ƒë·ªông")
st.caption("Phi√™n b·∫£n nghi·ªáp v·ª• th·ª±c ti·ªÖn ‚Äì Ph√¢n t√≠ch ƒë·ªãnh l∆∞·ª£ng + ƒë·ªãnh t√≠nh, x√¢y d·ª±ng chi·∫øn l∆∞·ª£c chƒÉm s√≥c kh√°ch h√†ng Agribank")

# ---------- CONFIG ----------
with st.expander("‚öôÔ∏è C·∫•u h√¨nh Gemini AI"):
    gemini_key = st.text_input("üî∏ Gemini API Key", type="password")
    gemini_model = st.selectbox("üîπ Model Gemini", ["gemini-2.0-flash", "gemini-1.5-flash"])
    creativity = st.slider("üé® M·ª©c s√°ng t·∫°o (0 - 2)", 0.0, 2.0, 0.8, 0.1)

uploaded = st.file_uploader("üì• T·∫£i file Excel (sheet KhachHang)", type=["xlsx"])

# ---------- H√ÄM PH·ª§ TR·ª¢ ----------
def call_gemini(prompt, key, model, creativity):
    try:
        client = genai.Client(api_key=key)
        resp = client.models.generate_content(model=model, contents=prompt, generation_config={"temperature":creativity})
        return resp.text.strip()
    except Exception as e:
        return f"‚ö†Ô∏è L·ªói Gemini: {e}"

def calc_scores(row):
    try:
        thu_nhap = float(str(row.get("Thu nh·∫≠p", 0)).replace(",", "").replace(".", ""))
        gui = float(str(row.get("S·ªë d∆∞ ti·ªÅn g·ª≠i", 0)).replace(",", "").replace(".", ""))
        vay = float(str(row.get("S·ªë d∆∞ ti·ªÅn vay", 0)).replace(",", "").replace(".", ""))

        rui_ro = min(100, max(0, (vay / (thu_nhap + 1)) * 60))
        tiem_nang = min(100, (thu_nhap + gui) / 1_000_000 * 10)
        gan_bo = 40 + len(str(row.get("D·ªãch v·ª• ƒëang d√πng", "")).split(",")) * 10
        if "Th√†nh ph·ªë" in str(row.get("Khu v·ª±c", "")): gan_bo += 10

        return round(rui_ro,1), round(tiem_nang,1), round(gan_bo,1)
    except:
        return 0,0,0

def suggest_action(r, t, g):
    acts = []
    if t > 80: acts.append("üëâ ƒê·ªÅ xu·∫•t g√≥i ti·∫øt ki·ªám d√†i h·∫°n ho·∫∑c ƒë·∫ßu t∆∞ linh ho·∫°t.")
    if r > 50: acts.append("‚ö†Ô∏è Theo d√µi d∆∞ n·ª£, xem x√©t t√°i c∆° c·∫•u / gia h·∫°n.")
    if g < 50: acts.append("üí¨ TƒÉng t∆∞∆°ng t√°c, t·ªï ch·ª©c CSKH ƒë·ªãnh k·ª≥.")
    if t < 40 and g < 50: acts.append("üìû Ti·∫øp c·∫≠n l·∫°i, g·ª£i m·ªü ∆∞u ƒë√£i nh·ªè ƒë·ªÉ kh√¥i ph·ª•c quan h·ªá.")
    if not acts: acts.append("‚úÖ Kh√°ch h√†ng ·ªïn ƒë·ªãnh ‚Äì duy tr√¨ chƒÉm s√≥c ƒë·ªãnh k·ª≥.")
    return acts

def export_excel(name, summary, df_scores):
    out = BytesIO()
    with pd.ExcelWriter(out, engine="openpyxl") as writer:
        pd.DataFrame({"Kh√°ch h√†ng":[name], "Ph√¢n t√≠ch":[summary]}).to_excel(writer, sheet_name="PhanTich", index=False)
        df_scores.to_excel(writer, sheet_name="Scores", index=False)
    return out.getvalue()

# ---------- MAIN ----------
if uploaded:
    df = pd.read_excel(uploaded, sheet_name="KhachHang")
    st.success(f"‚úÖ ƒê√£ t·∫£i {len(df)} kh√°ch h√†ng.")

    scores = [calc_scores(row) for _, row in df.iterrows()]
    df["ƒêi·ªÉm R·ªßi ro"], df["ƒêi·ªÉm Ti·ªÅm nƒÉng"], df["ƒêi·ªÉm G·∫Øn b√≥"] = zip(*scores)
    st.dataframe(df, use_container_width=True)

    # ========== CH·ªåN KH√ÅCH H√ÄNG ==========
    selected = st.selectbox("üë§ Ch·ªçn kh√°ch h√†ng c·∫ßn ph√¢n t√≠ch", df["H·ªç t√™n"].tolist())
    cust = df[df["H·ªç t√™n"] == selected].iloc[0].to_dict()

    # ========== CH·∫æ ƒê·ªò SO S√ÅNH ==========
    compare_mode = st.checkbox("üîÅ So s√°nh v·ªõi kh√°ch h√†ng kh√°c")
    if compare_mode:
        compare_with = st.selectbox("Ch·ªçn kh√°ch h√†ng so s√°nh", [x for x in df["H·ªç t√™n"].tolist() if x != selected])
        cust2 = df[df["H·ªç t√™n"] == compare_with].iloc[0].to_dict()
        r1,t1,g1 = calc_scores(cust)
        r2,t2,g2 = calc_scores(cust2)
        comp_df = pd.DataFrame({
            "Ch·ªâ ti√™u":["R·ªßi ro","Ti·ªÅm nƒÉng","G·∫Øn b√≥"],
            selected:[r1,t1,g1],
            compare_with:[r2,t2,g2]
        })
        st.subheader("üìä So s√°nh gi·ªØa hai kh√°ch h√†ng")
        st.dataframe(comp_df, use_container_width=False)
        fig, ax = plt.subplots()
        sns.barplot(data=comp_df.melt(id_vars="Ch·ªâ ti√™u"), x="Ch·ªâ ti√™u", y="value", hue="variable", ax=ax)
        ax.set_title("So s√°nh ƒëi·ªÉm gi·ªØa hai kh√°ch h√†ng")
        st.pyplot(fig)

    # ========== PH√ÇN T√çCH CHUY√äN S√ÇU ==========
    if st.button("üöÄ Ph√¢n t√≠ch chuy√™n s√¢u & ƒë·ªÅ xu·∫•t h√†nh ƒë·ªông"):
        r,t,g = calc_scores(cust)
        actions = suggest_action(r,t,g)

        # --- PROMPT CHUY√äN NGHI·ªÜP NGHI·ªÜP V·ª§ AGRIBANK ---
        prompt = f"""
B·∫°n l√† chuy√™n gia ph√¢n t√≠ch kh√°ch h√†ng Agribank c√≥ h∆°n 15 nƒÉm kinh nghi·ªám.
D∆∞·ªõi ƒë√¢y l√† d·ªØ li·ªáu kh√°ch h√†ng th·ª±c t·∫ø:
{cust}

C√°c ch·ªâ s·ªë h·ªá th·ªëng:
- ƒêi·ªÉm r·ªßi ro: {r}
- ƒêi·ªÉm ti·ªÅm nƒÉng: {t}
- ƒêi·ªÉm g·∫Øn b√≥: {g}

H√£y vi·∫øt b·∫£n PH√ÇN T√çCH CHUY√äN S√ÇU theo 4 ph·∫ßn:
1Ô∏è‚É£ **T·ªïng quan nƒÉng l·ª±c t√†i ch√≠nh:** ƒë√°nh gi√° th·ª±c t·∫ø, ph√¢n t√≠ch c∆° c·∫•u thu nh·∫≠p, ti·ªÅn g·ª≠i, d∆∞ n·ª£.
2Ô∏è‚É£ **H√†nh vi & t√¢m l√Ω kh√°ch h√†ng:** m√¥ t·∫£ phong c√°ch, m·ª©c ƒë·ªô trung th√†nh, y·∫øu t·ªë v√πng mi·ªÅn, ngh·ªÅ nghi·ªáp.
3Ô∏è‚É£ **ƒê·ªãnh h∆∞·ªõng s·∫£n ph·∫©m ph√π h·ª£p:** ch·ªçn t·ªëi ƒëa 3 s·∫£n ph·∫©m Agribank (VD: Ti·∫øt ki·ªám b·∫≠c thang, vay ti√™u d√πng, b·∫£o hi·ªÉm ABIC, QR POS...).
4Ô∏è‚É£ **Chi·∫øn l∆∞·ª£c chƒÉm s√≥c & h√†nh ƒë·ªông ƒë·ªÅ xu·∫•t:** n√™u c·ª• th·ªÉ h√†nh ƒë·ªông m√† CBTD n√™n l√†m trong 1‚Äì3 th√°ng t·ªõi.

L∆∞u √Ω:
- Kh√¥ng n√≥i chung chung.
- Ph·∫£i b√°m s√°t d·ªØ li·ªáu v√† ch·ªâ s·ªë th·ª±c t·∫ø.
- Vi·∫øt ng·∫Øn g·ªçn, d·ªÖ ƒë·ªçc, nh∆∞ t∆∞ v·∫•n nghi·ªáp v·ª• th·∫≠t.
"""
        ai_text = call_gemini(prompt, gemini_key, gemini_model, creativity)

        summary = f"""
### üìå Ph√¢n t√≠ch chuy√™n s√¢u kh√°ch h√†ng **{selected}**
#### üî¢ ƒêi·ªÉm h·ªá th·ªëng
- R·ªßi ro: {r} | Ti·ªÅm nƒÉng: {t} | G·∫Øn b√≥: {g}

#### üí° Nh·∫≠n ƒë·ªãnh chuy√™n gia (AI)
{ai_text}

#### üéØ H√†nh ƒë·ªông ƒë·ªÅ xu·∫•t
{chr(10).join(actions)}
"""
        st.markdown(f"<div class='analysis-box'>{summary}</div>", unsafe_allow_html=True)

        # Xu·∫•t Excel
        df_scores = pd.DataFrame({"Ch·ªâ ti√™u":["R·ªßi ro","Ti·ªÅm nƒÉng","G·∫Øn b√≥"],"ƒêi·ªÉm":[r,t,g]})
        excel = export_excel(selected, summary, df_scores)
        st.download_button("üìä T·∫£i b√°o c√°o chi ti·∫øt (Excel)", excel, file_name=f"{selected}_PhanTich_AgriAI.xlsx")

    # ========== PH√ÇN T√çCH NH√ìM ==========
    st.subheader("üìà Ph√¢n t√≠ch t·ªïng quan nh√≥m kh√°ch h√†ng")
    col1, col2 = st.columns(2)
    with col1:
        fig, ax = plt.subplots()
        sns.histplot(df["ƒêi·ªÉm Ti·ªÅm nƒÉng"], color="#AE1C3F", kde=True, ax=ax)
        ax.set_title("Ph√¢n b·ªë ƒêi·ªÉm Ti·ªÅm nƒÉng")
        st.pyplot(fig)

    with col2:
        fig2, ax2 = plt.subplots()
        sns.boxplot(df[["ƒêi·ªÉm R·ªßi ro","ƒêi·ªÉm G·∫Øn b√≥"]], ax=ax2)
        ax2.set_title("So s√°nh R·ªßi ro & G·∫Øn b√≥")
        st.pyplot(fig2)

else:
    st.info("‚¨ÜÔ∏è H√£y t·∫£i file Excel kh√°ch h√†ng (sheet KhachHang) ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch.")

# ---------- FOOTER ----------
st.markdown("<div class='footer'>¬© 2025 Agribank AI | AgriAI CRM Pro 4.1</div>", unsafe_allow_html=True)
